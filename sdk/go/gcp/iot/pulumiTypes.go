// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DeviceConfig struct {
	BinaryData      *string `pulumi:"binaryData"`
	CloudUpdateTime *string `pulumi:"cloudUpdateTime"`
	DeviceAckTime   *string `pulumi:"deviceAckTime"`
	Version         *string `pulumi:"version"`
}

// DeviceConfigInput is an input type that accepts DeviceConfigArgs and DeviceConfigOutput values.
// You can construct a concrete instance of `DeviceConfigInput` via:
//
// 		 DeviceConfigArgs{...}
//
type DeviceConfigInput interface {
	pulumi.Input

	ToDeviceConfigOutput() DeviceConfigOutput
	ToDeviceConfigOutputWithContext(context.Context) DeviceConfigOutput
}

type DeviceConfigArgs struct {
	BinaryData      pulumi.StringPtrInput `pulumi:"binaryData"`
	CloudUpdateTime pulumi.StringPtrInput `pulumi:"cloudUpdateTime"`
	DeviceAckTime   pulumi.StringPtrInput `pulumi:"deviceAckTime"`
	Version         pulumi.StringPtrInput `pulumi:"version"`
}

func (DeviceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceConfig)(nil)).Elem()
}

func (i DeviceConfigArgs) ToDeviceConfigOutput() DeviceConfigOutput {
	return i.ToDeviceConfigOutputWithContext(context.Background())
}

func (i DeviceConfigArgs) ToDeviceConfigOutputWithContext(ctx context.Context) DeviceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceConfigOutput)
}

func (i DeviceConfigArgs) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return i.ToDeviceConfigPtrOutputWithContext(context.Background())
}

func (i DeviceConfigArgs) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceConfigOutput).ToDeviceConfigPtrOutputWithContext(ctx)
}

// DeviceConfigPtrInput is an input type that accepts DeviceConfigArgs, DeviceConfigPtr and DeviceConfigPtrOutput values.
// You can construct a concrete instance of `DeviceConfigPtrInput` via:
//
// 		 DeviceConfigArgs{...}
//
//  or:
//
// 		 nil
//
type DeviceConfigPtrInput interface {
	pulumi.Input

	ToDeviceConfigPtrOutput() DeviceConfigPtrOutput
	ToDeviceConfigPtrOutputWithContext(context.Context) DeviceConfigPtrOutput
}

type deviceConfigPtrType DeviceConfigArgs

func DeviceConfigPtr(v *DeviceConfigArgs) DeviceConfigPtrInput {
	return (*deviceConfigPtrType)(v)
}

func (*deviceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceConfig)(nil)).Elem()
}

func (i *deviceConfigPtrType) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return i.ToDeviceConfigPtrOutputWithContext(context.Background())
}

func (i *deviceConfigPtrType) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceConfigPtrOutput)
}

type DeviceConfigOutput struct{ *pulumi.OutputState }

func (DeviceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceConfig)(nil)).Elem()
}

func (o DeviceConfigOutput) ToDeviceConfigOutput() DeviceConfigOutput {
	return o
}

func (o DeviceConfigOutput) ToDeviceConfigOutputWithContext(ctx context.Context) DeviceConfigOutput {
	return o
}

func (o DeviceConfigOutput) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return o.ToDeviceConfigPtrOutputWithContext(context.Background())
}

func (o DeviceConfigOutput) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return o.ApplyT(func(v DeviceConfig) *DeviceConfig {
		return &v
	}).(DeviceConfigPtrOutput)
}
func (o DeviceConfigOutput) BinaryData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceConfig) *string { return v.BinaryData }).(pulumi.StringPtrOutput)
}

func (o DeviceConfigOutput) CloudUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceConfig) *string { return v.CloudUpdateTime }).(pulumi.StringPtrOutput)
}

func (o DeviceConfigOutput) DeviceAckTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceConfig) *string { return v.DeviceAckTime }).(pulumi.StringPtrOutput)
}

func (o DeviceConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DeviceConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceConfig)(nil)).Elem()
}

func (o DeviceConfigPtrOutput) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return o
}

func (o DeviceConfigPtrOutput) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return o
}

func (o DeviceConfigPtrOutput) Elem() DeviceConfigOutput {
	return o.ApplyT(func(v *DeviceConfig) DeviceConfig { return *v }).(DeviceConfigOutput)
}

func (o DeviceConfigPtrOutput) BinaryData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceConfig) *string {
		if v == nil {
			return nil
		}
		return v.BinaryData
	}).(pulumi.StringPtrOutput)
}

func (o DeviceConfigPtrOutput) CloudUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceConfig) *string {
		if v == nil {
			return nil
		}
		return v.CloudUpdateTime
	}).(pulumi.StringPtrOutput)
}

func (o DeviceConfigPtrOutput) DeviceAckTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceConfig) *string {
		if v == nil {
			return nil
		}
		return v.DeviceAckTime
	}).(pulumi.StringPtrOutput)
}

func (o DeviceConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DeviceCredential struct {
	// The time at which this credential becomes invalid.
	ExpirationTime *string `pulumi:"expirationTime"`
	// A public key used to verify the signature of JSON Web Tokens (JWTs).
	// Structure is documented below.
	PublicKey DeviceCredentialPublicKey `pulumi:"publicKey"`
}

// DeviceCredentialInput is an input type that accepts DeviceCredentialArgs and DeviceCredentialOutput values.
// You can construct a concrete instance of `DeviceCredentialInput` via:
//
// 		 DeviceCredentialArgs{...}
//
type DeviceCredentialInput interface {
	pulumi.Input

	ToDeviceCredentialOutput() DeviceCredentialOutput
	ToDeviceCredentialOutputWithContext(context.Context) DeviceCredentialOutput
}

type DeviceCredentialArgs struct {
	// The time at which this credential becomes invalid.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// A public key used to verify the signature of JSON Web Tokens (JWTs).
	// Structure is documented below.
	PublicKey DeviceCredentialPublicKeyInput `pulumi:"publicKey"`
}

func (DeviceCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredential)(nil)).Elem()
}

func (i DeviceCredentialArgs) ToDeviceCredentialOutput() DeviceCredentialOutput {
	return i.ToDeviceCredentialOutputWithContext(context.Background())
}

func (i DeviceCredentialArgs) ToDeviceCredentialOutputWithContext(ctx context.Context) DeviceCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCredentialOutput)
}

// DeviceCredentialArrayInput is an input type that accepts DeviceCredentialArray and DeviceCredentialArrayOutput values.
// You can construct a concrete instance of `DeviceCredentialArrayInput` via:
//
// 		 DeviceCredentialArray{ DeviceCredentialArgs{...} }
//
type DeviceCredentialArrayInput interface {
	pulumi.Input

	ToDeviceCredentialArrayOutput() DeviceCredentialArrayOutput
	ToDeviceCredentialArrayOutputWithContext(context.Context) DeviceCredentialArrayOutput
}

type DeviceCredentialArray []DeviceCredentialInput

func (DeviceCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceCredential)(nil)).Elem()
}

func (i DeviceCredentialArray) ToDeviceCredentialArrayOutput() DeviceCredentialArrayOutput {
	return i.ToDeviceCredentialArrayOutputWithContext(context.Background())
}

func (i DeviceCredentialArray) ToDeviceCredentialArrayOutputWithContext(ctx context.Context) DeviceCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCredentialArrayOutput)
}

type DeviceCredentialOutput struct{ *pulumi.OutputState }

func (DeviceCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredential)(nil)).Elem()
}

func (o DeviceCredentialOutput) ToDeviceCredentialOutput() DeviceCredentialOutput {
	return o
}

func (o DeviceCredentialOutput) ToDeviceCredentialOutputWithContext(ctx context.Context) DeviceCredentialOutput {
	return o
}

// The time at which this credential becomes invalid.
func (o DeviceCredentialOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceCredential) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// A public key used to verify the signature of JSON Web Tokens (JWTs).
// Structure is documented below.
func (o DeviceCredentialOutput) PublicKey() DeviceCredentialPublicKeyOutput {
	return o.ApplyT(func(v DeviceCredential) DeviceCredentialPublicKey { return v.PublicKey }).(DeviceCredentialPublicKeyOutput)
}

type DeviceCredentialArrayOutput struct{ *pulumi.OutputState }

func (DeviceCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceCredential)(nil)).Elem()
}

func (o DeviceCredentialArrayOutput) ToDeviceCredentialArrayOutput() DeviceCredentialArrayOutput {
	return o
}

func (o DeviceCredentialArrayOutput) ToDeviceCredentialArrayOutputWithContext(ctx context.Context) DeviceCredentialArrayOutput {
	return o
}

func (o DeviceCredentialArrayOutput) Index(i pulumi.IntInput) DeviceCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceCredential {
		return vs[0].([]DeviceCredential)[vs[1].(int)]
	}).(DeviceCredentialOutput)
}

type DeviceCredentialPublicKey struct {
	// The format of the key.
	// Possible values are `RSA_PEM`, `RSA_X509_PEM`, `ES256_PEM`, and `ES256_X509_PEM`.
	Format string `pulumi:"format"`
	// The key data.
	Key string `pulumi:"key"`
}

// DeviceCredentialPublicKeyInput is an input type that accepts DeviceCredentialPublicKeyArgs and DeviceCredentialPublicKeyOutput values.
// You can construct a concrete instance of `DeviceCredentialPublicKeyInput` via:
//
// 		 DeviceCredentialPublicKeyArgs{...}
//
type DeviceCredentialPublicKeyInput interface {
	pulumi.Input

	ToDeviceCredentialPublicKeyOutput() DeviceCredentialPublicKeyOutput
	ToDeviceCredentialPublicKeyOutputWithContext(context.Context) DeviceCredentialPublicKeyOutput
}

type DeviceCredentialPublicKeyArgs struct {
	// The format of the key.
	// Possible values are `RSA_PEM`, `RSA_X509_PEM`, `ES256_PEM`, and `ES256_X509_PEM`.
	Format pulumi.StringInput `pulumi:"format"`
	// The key data.
	Key pulumi.StringInput `pulumi:"key"`
}

func (DeviceCredentialPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredentialPublicKey)(nil)).Elem()
}

func (i DeviceCredentialPublicKeyArgs) ToDeviceCredentialPublicKeyOutput() DeviceCredentialPublicKeyOutput {
	return i.ToDeviceCredentialPublicKeyOutputWithContext(context.Background())
}

func (i DeviceCredentialPublicKeyArgs) ToDeviceCredentialPublicKeyOutputWithContext(ctx context.Context) DeviceCredentialPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCredentialPublicKeyOutput)
}

type DeviceCredentialPublicKeyOutput struct{ *pulumi.OutputState }

func (DeviceCredentialPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredentialPublicKey)(nil)).Elem()
}

func (o DeviceCredentialPublicKeyOutput) ToDeviceCredentialPublicKeyOutput() DeviceCredentialPublicKeyOutput {
	return o
}

func (o DeviceCredentialPublicKeyOutput) ToDeviceCredentialPublicKeyOutputWithContext(ctx context.Context) DeviceCredentialPublicKeyOutput {
	return o
}

// The format of the key.
// Possible values are `RSA_PEM`, `RSA_X509_PEM`, `ES256_PEM`, and `ES256_X509_PEM`.
func (o DeviceCredentialPublicKeyOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceCredentialPublicKey) string { return v.Format }).(pulumi.StringOutput)
}

// The key data.
func (o DeviceCredentialPublicKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceCredentialPublicKey) string { return v.Key }).(pulumi.StringOutput)
}

type DeviceGatewayConfig struct {
	// Indicates whether the device is a gateway.
	// Possible values are `ASSOCIATION_ONLY`, `DEVICE_AUTH_TOKEN_ONLY`, and `ASSOCIATION_AND_DEVICE_AUTH_TOKEN`.
	GatewayAuthMethod *string `pulumi:"gatewayAuthMethod"`
	// Indicates whether the device is a gateway.
	// Default value is `NON_GATEWAY`.
	// Possible values are `GATEWAY` and `NON_GATEWAY`.
	GatewayType *string `pulumi:"gatewayType"`
	// -
	// The ID of the gateway the device accessed most recently.
	LastAccessedGatewayId *string `pulumi:"lastAccessedGatewayId"`
	// -
	// The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
	LastAccessedGatewayTime *string `pulumi:"lastAccessedGatewayTime"`
}

// DeviceGatewayConfigInput is an input type that accepts DeviceGatewayConfigArgs and DeviceGatewayConfigOutput values.
// You can construct a concrete instance of `DeviceGatewayConfigInput` via:
//
// 		 DeviceGatewayConfigArgs{...}
//
type DeviceGatewayConfigInput interface {
	pulumi.Input

	ToDeviceGatewayConfigOutput() DeviceGatewayConfigOutput
	ToDeviceGatewayConfigOutputWithContext(context.Context) DeviceGatewayConfigOutput
}

type DeviceGatewayConfigArgs struct {
	// Indicates whether the device is a gateway.
	// Possible values are `ASSOCIATION_ONLY`, `DEVICE_AUTH_TOKEN_ONLY`, and `ASSOCIATION_AND_DEVICE_AUTH_TOKEN`.
	GatewayAuthMethod pulumi.StringPtrInput `pulumi:"gatewayAuthMethod"`
	// Indicates whether the device is a gateway.
	// Default value is `NON_GATEWAY`.
	// Possible values are `GATEWAY` and `NON_GATEWAY`.
	GatewayType pulumi.StringPtrInput `pulumi:"gatewayType"`
	// -
	// The ID of the gateway the device accessed most recently.
	LastAccessedGatewayId pulumi.StringPtrInput `pulumi:"lastAccessedGatewayId"`
	// -
	// The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
	LastAccessedGatewayTime pulumi.StringPtrInput `pulumi:"lastAccessedGatewayTime"`
}

func (DeviceGatewayConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceGatewayConfig)(nil)).Elem()
}

func (i DeviceGatewayConfigArgs) ToDeviceGatewayConfigOutput() DeviceGatewayConfigOutput {
	return i.ToDeviceGatewayConfigOutputWithContext(context.Background())
}

func (i DeviceGatewayConfigArgs) ToDeviceGatewayConfigOutputWithContext(ctx context.Context) DeviceGatewayConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGatewayConfigOutput)
}

func (i DeviceGatewayConfigArgs) ToDeviceGatewayConfigPtrOutput() DeviceGatewayConfigPtrOutput {
	return i.ToDeviceGatewayConfigPtrOutputWithContext(context.Background())
}

func (i DeviceGatewayConfigArgs) ToDeviceGatewayConfigPtrOutputWithContext(ctx context.Context) DeviceGatewayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGatewayConfigOutput).ToDeviceGatewayConfigPtrOutputWithContext(ctx)
}

// DeviceGatewayConfigPtrInput is an input type that accepts DeviceGatewayConfigArgs, DeviceGatewayConfigPtr and DeviceGatewayConfigPtrOutput values.
// You can construct a concrete instance of `DeviceGatewayConfigPtrInput` via:
//
// 		 DeviceGatewayConfigArgs{...}
//
//  or:
//
// 		 nil
//
type DeviceGatewayConfigPtrInput interface {
	pulumi.Input

	ToDeviceGatewayConfigPtrOutput() DeviceGatewayConfigPtrOutput
	ToDeviceGatewayConfigPtrOutputWithContext(context.Context) DeviceGatewayConfigPtrOutput
}

type deviceGatewayConfigPtrType DeviceGatewayConfigArgs

func DeviceGatewayConfigPtr(v *DeviceGatewayConfigArgs) DeviceGatewayConfigPtrInput {
	return (*deviceGatewayConfigPtrType)(v)
}

func (*deviceGatewayConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGatewayConfig)(nil)).Elem()
}

func (i *deviceGatewayConfigPtrType) ToDeviceGatewayConfigPtrOutput() DeviceGatewayConfigPtrOutput {
	return i.ToDeviceGatewayConfigPtrOutputWithContext(context.Background())
}

func (i *deviceGatewayConfigPtrType) ToDeviceGatewayConfigPtrOutputWithContext(ctx context.Context) DeviceGatewayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGatewayConfigPtrOutput)
}

type DeviceGatewayConfigOutput struct{ *pulumi.OutputState }

func (DeviceGatewayConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceGatewayConfig)(nil)).Elem()
}

func (o DeviceGatewayConfigOutput) ToDeviceGatewayConfigOutput() DeviceGatewayConfigOutput {
	return o
}

func (o DeviceGatewayConfigOutput) ToDeviceGatewayConfigOutputWithContext(ctx context.Context) DeviceGatewayConfigOutput {
	return o
}

func (o DeviceGatewayConfigOutput) ToDeviceGatewayConfigPtrOutput() DeviceGatewayConfigPtrOutput {
	return o.ToDeviceGatewayConfigPtrOutputWithContext(context.Background())
}

func (o DeviceGatewayConfigOutput) ToDeviceGatewayConfigPtrOutputWithContext(ctx context.Context) DeviceGatewayConfigPtrOutput {
	return o.ApplyT(func(v DeviceGatewayConfig) *DeviceGatewayConfig {
		return &v
	}).(DeviceGatewayConfigPtrOutput)
}

// Indicates whether the device is a gateway.
// Possible values are `ASSOCIATION_ONLY`, `DEVICE_AUTH_TOKEN_ONLY`, and `ASSOCIATION_AND_DEVICE_AUTH_TOKEN`.
func (o DeviceGatewayConfigOutput) GatewayAuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceGatewayConfig) *string { return v.GatewayAuthMethod }).(pulumi.StringPtrOutput)
}

// Indicates whether the device is a gateway.
// Default value is `NON_GATEWAY`.
// Possible values are `GATEWAY` and `NON_GATEWAY`.
func (o DeviceGatewayConfigOutput) GatewayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceGatewayConfig) *string { return v.GatewayType }).(pulumi.StringPtrOutput)
}

// -
// The ID of the gateway the device accessed most recently.
func (o DeviceGatewayConfigOutput) LastAccessedGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceGatewayConfig) *string { return v.LastAccessedGatewayId }).(pulumi.StringPtrOutput)
}

// -
// The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
func (o DeviceGatewayConfigOutput) LastAccessedGatewayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceGatewayConfig) *string { return v.LastAccessedGatewayTime }).(pulumi.StringPtrOutput)
}

type DeviceGatewayConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceGatewayConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGatewayConfig)(nil)).Elem()
}

func (o DeviceGatewayConfigPtrOutput) ToDeviceGatewayConfigPtrOutput() DeviceGatewayConfigPtrOutput {
	return o
}

func (o DeviceGatewayConfigPtrOutput) ToDeviceGatewayConfigPtrOutputWithContext(ctx context.Context) DeviceGatewayConfigPtrOutput {
	return o
}

func (o DeviceGatewayConfigPtrOutput) Elem() DeviceGatewayConfigOutput {
	return o.ApplyT(func(v *DeviceGatewayConfig) DeviceGatewayConfig { return *v }).(DeviceGatewayConfigOutput)
}

// Indicates whether the device is a gateway.
// Possible values are `ASSOCIATION_ONLY`, `DEVICE_AUTH_TOKEN_ONLY`, and `ASSOCIATION_AND_DEVICE_AUTH_TOKEN`.
func (o DeviceGatewayConfigPtrOutput) GatewayAuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceGatewayConfig) *string {
		if v == nil {
			return nil
		}
		return v.GatewayAuthMethod
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the device is a gateway.
// Default value is `NON_GATEWAY`.
// Possible values are `GATEWAY` and `NON_GATEWAY`.
func (o DeviceGatewayConfigPtrOutput) GatewayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceGatewayConfig) *string {
		if v == nil {
			return nil
		}
		return v.GatewayType
	}).(pulumi.StringPtrOutput)
}

// -
// The ID of the gateway the device accessed most recently.
func (o DeviceGatewayConfigPtrOutput) LastAccessedGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceGatewayConfig) *string {
		if v == nil {
			return nil
		}
		return v.LastAccessedGatewayId
	}).(pulumi.StringPtrOutput)
}

// -
// The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
func (o DeviceGatewayConfigPtrOutput) LastAccessedGatewayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceGatewayConfig) *string {
		if v == nil {
			return nil
		}
		return v.LastAccessedGatewayTime
	}).(pulumi.StringPtrOutput)
}

type DeviceLastErrorStatus struct {
	Details []map[string]interface{} `pulumi:"details"`
	Message *string                  `pulumi:"message"`
	Number  *int                     `pulumi:"number"`
}

// DeviceLastErrorStatusInput is an input type that accepts DeviceLastErrorStatusArgs and DeviceLastErrorStatusOutput values.
// You can construct a concrete instance of `DeviceLastErrorStatusInput` via:
//
// 		 DeviceLastErrorStatusArgs{...}
//
type DeviceLastErrorStatusInput interface {
	pulumi.Input

	ToDeviceLastErrorStatusOutput() DeviceLastErrorStatusOutput
	ToDeviceLastErrorStatusOutputWithContext(context.Context) DeviceLastErrorStatusOutput
}

type DeviceLastErrorStatusArgs struct {
	Details pulumi.MapArrayInput  `pulumi:"details"`
	Message pulumi.StringPtrInput `pulumi:"message"`
	Number  pulumi.IntPtrInput    `pulumi:"number"`
}

func (DeviceLastErrorStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLastErrorStatus)(nil)).Elem()
}

func (i DeviceLastErrorStatusArgs) ToDeviceLastErrorStatusOutput() DeviceLastErrorStatusOutput {
	return i.ToDeviceLastErrorStatusOutputWithContext(context.Background())
}

func (i DeviceLastErrorStatusArgs) ToDeviceLastErrorStatusOutputWithContext(ctx context.Context) DeviceLastErrorStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLastErrorStatusOutput)
}

func (i DeviceLastErrorStatusArgs) ToDeviceLastErrorStatusPtrOutput() DeviceLastErrorStatusPtrOutput {
	return i.ToDeviceLastErrorStatusPtrOutputWithContext(context.Background())
}

func (i DeviceLastErrorStatusArgs) ToDeviceLastErrorStatusPtrOutputWithContext(ctx context.Context) DeviceLastErrorStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLastErrorStatusOutput).ToDeviceLastErrorStatusPtrOutputWithContext(ctx)
}

// DeviceLastErrorStatusPtrInput is an input type that accepts DeviceLastErrorStatusArgs, DeviceLastErrorStatusPtr and DeviceLastErrorStatusPtrOutput values.
// You can construct a concrete instance of `DeviceLastErrorStatusPtrInput` via:
//
// 		 DeviceLastErrorStatusArgs{...}
//
//  or:
//
// 		 nil
//
type DeviceLastErrorStatusPtrInput interface {
	pulumi.Input

	ToDeviceLastErrorStatusPtrOutput() DeviceLastErrorStatusPtrOutput
	ToDeviceLastErrorStatusPtrOutputWithContext(context.Context) DeviceLastErrorStatusPtrOutput
}

type deviceLastErrorStatusPtrType DeviceLastErrorStatusArgs

func DeviceLastErrorStatusPtr(v *DeviceLastErrorStatusArgs) DeviceLastErrorStatusPtrInput {
	return (*deviceLastErrorStatusPtrType)(v)
}

func (*deviceLastErrorStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceLastErrorStatus)(nil)).Elem()
}

func (i *deviceLastErrorStatusPtrType) ToDeviceLastErrorStatusPtrOutput() DeviceLastErrorStatusPtrOutput {
	return i.ToDeviceLastErrorStatusPtrOutputWithContext(context.Background())
}

func (i *deviceLastErrorStatusPtrType) ToDeviceLastErrorStatusPtrOutputWithContext(ctx context.Context) DeviceLastErrorStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLastErrorStatusPtrOutput)
}

type DeviceLastErrorStatusOutput struct{ *pulumi.OutputState }

func (DeviceLastErrorStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLastErrorStatus)(nil)).Elem()
}

func (o DeviceLastErrorStatusOutput) ToDeviceLastErrorStatusOutput() DeviceLastErrorStatusOutput {
	return o
}

func (o DeviceLastErrorStatusOutput) ToDeviceLastErrorStatusOutputWithContext(ctx context.Context) DeviceLastErrorStatusOutput {
	return o
}

func (o DeviceLastErrorStatusOutput) ToDeviceLastErrorStatusPtrOutput() DeviceLastErrorStatusPtrOutput {
	return o.ToDeviceLastErrorStatusPtrOutputWithContext(context.Background())
}

func (o DeviceLastErrorStatusOutput) ToDeviceLastErrorStatusPtrOutputWithContext(ctx context.Context) DeviceLastErrorStatusPtrOutput {
	return o.ApplyT(func(v DeviceLastErrorStatus) *DeviceLastErrorStatus {
		return &v
	}).(DeviceLastErrorStatusPtrOutput)
}
func (o DeviceLastErrorStatusOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DeviceLastErrorStatus) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

func (o DeviceLastErrorStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLastErrorStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o DeviceLastErrorStatusOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceLastErrorStatus) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type DeviceLastErrorStatusPtrOutput struct{ *pulumi.OutputState }

func (DeviceLastErrorStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceLastErrorStatus)(nil)).Elem()
}

func (o DeviceLastErrorStatusPtrOutput) ToDeviceLastErrorStatusPtrOutput() DeviceLastErrorStatusPtrOutput {
	return o
}

func (o DeviceLastErrorStatusPtrOutput) ToDeviceLastErrorStatusPtrOutputWithContext(ctx context.Context) DeviceLastErrorStatusPtrOutput {
	return o
}

func (o DeviceLastErrorStatusPtrOutput) Elem() DeviceLastErrorStatusOutput {
	return o.ApplyT(func(v *DeviceLastErrorStatus) DeviceLastErrorStatus { return *v }).(DeviceLastErrorStatusOutput)
}

func (o DeviceLastErrorStatusPtrOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DeviceLastErrorStatus) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.MapArrayOutput)
}

func (o DeviceLastErrorStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLastErrorStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o DeviceLastErrorStatusPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceLastErrorStatus) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type DeviceStateType struct {
	BinaryData *string `pulumi:"binaryData"`
	UpdateTime *string `pulumi:"updateTime"`
}

// DeviceStateTypeInput is an input type that accepts DeviceStateTypeArgs and DeviceStateTypeOutput values.
// You can construct a concrete instance of `DeviceStateTypeInput` via:
//
// 		 DeviceStateTypeArgs{...}
//
type DeviceStateTypeInput interface {
	pulumi.Input

	ToDeviceStateTypeOutput() DeviceStateTypeOutput
	ToDeviceStateTypeOutputWithContext(context.Context) DeviceStateTypeOutput
}

type DeviceStateTypeArgs struct {
	BinaryData pulumi.StringPtrInput `pulumi:"binaryData"`
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (DeviceStateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceStateType)(nil)).Elem()
}

func (i DeviceStateTypeArgs) ToDeviceStateTypeOutput() DeviceStateTypeOutput {
	return i.ToDeviceStateTypeOutputWithContext(context.Background())
}

func (i DeviceStateTypeArgs) ToDeviceStateTypeOutputWithContext(ctx context.Context) DeviceStateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceStateTypeOutput)
}

func (i DeviceStateTypeArgs) ToDeviceStateTypePtrOutput() DeviceStateTypePtrOutput {
	return i.ToDeviceStateTypePtrOutputWithContext(context.Background())
}

func (i DeviceStateTypeArgs) ToDeviceStateTypePtrOutputWithContext(ctx context.Context) DeviceStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceStateTypeOutput).ToDeviceStateTypePtrOutputWithContext(ctx)
}

// DeviceStateTypePtrInput is an input type that accepts DeviceStateTypeArgs, DeviceStateTypePtr and DeviceStateTypePtrOutput values.
// You can construct a concrete instance of `DeviceStateTypePtrInput` via:
//
// 		 DeviceStateTypeArgs{...}
//
//  or:
//
// 		 nil
//
type DeviceStateTypePtrInput interface {
	pulumi.Input

	ToDeviceStateTypePtrOutput() DeviceStateTypePtrOutput
	ToDeviceStateTypePtrOutputWithContext(context.Context) DeviceStateTypePtrOutput
}

type deviceStateTypePtrType DeviceStateTypeArgs

func DeviceStateTypePtr(v *DeviceStateTypeArgs) DeviceStateTypePtrInput {
	return (*deviceStateTypePtrType)(v)
}

func (*deviceStateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceStateType)(nil)).Elem()
}

func (i *deviceStateTypePtrType) ToDeviceStateTypePtrOutput() DeviceStateTypePtrOutput {
	return i.ToDeviceStateTypePtrOutputWithContext(context.Background())
}

func (i *deviceStateTypePtrType) ToDeviceStateTypePtrOutputWithContext(ctx context.Context) DeviceStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceStateTypePtrOutput)
}

type DeviceStateTypeOutput struct{ *pulumi.OutputState }

func (DeviceStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceStateType)(nil)).Elem()
}

func (o DeviceStateTypeOutput) ToDeviceStateTypeOutput() DeviceStateTypeOutput {
	return o
}

func (o DeviceStateTypeOutput) ToDeviceStateTypeOutputWithContext(ctx context.Context) DeviceStateTypeOutput {
	return o
}

func (o DeviceStateTypeOutput) ToDeviceStateTypePtrOutput() DeviceStateTypePtrOutput {
	return o.ToDeviceStateTypePtrOutputWithContext(context.Background())
}

func (o DeviceStateTypeOutput) ToDeviceStateTypePtrOutputWithContext(ctx context.Context) DeviceStateTypePtrOutput {
	return o.ApplyT(func(v DeviceStateType) *DeviceStateType {
		return &v
	}).(DeviceStateTypePtrOutput)
}
func (o DeviceStateTypeOutput) BinaryData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceStateType) *string { return v.BinaryData }).(pulumi.StringPtrOutput)
}

func (o DeviceStateTypeOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceStateType) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type DeviceStateTypePtrOutput struct{ *pulumi.OutputState }

func (DeviceStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceStateType)(nil)).Elem()
}

func (o DeviceStateTypePtrOutput) ToDeviceStateTypePtrOutput() DeviceStateTypePtrOutput {
	return o
}

func (o DeviceStateTypePtrOutput) ToDeviceStateTypePtrOutputWithContext(ctx context.Context) DeviceStateTypePtrOutput {
	return o
}

func (o DeviceStateTypePtrOutput) Elem() DeviceStateTypeOutput {
	return o.ApplyT(func(v *DeviceStateType) DeviceStateType { return *v }).(DeviceStateTypeOutput)
}

func (o DeviceStateTypePtrOutput) BinaryData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceStateType) *string {
		if v == nil {
			return nil
		}
		return v.BinaryData
	}).(pulumi.StringPtrOutput)
}

func (o DeviceStateTypePtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceStateType) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

type RegistryCredential struct {
	// A public key certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificate `pulumi:"publicKeyCertificate"`
}

// RegistryCredentialInput is an input type that accepts RegistryCredentialArgs and RegistryCredentialOutput values.
// You can construct a concrete instance of `RegistryCredentialInput` via:
//
// 		 RegistryCredentialArgs{...}
//
type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(context.Context) RegistryCredentialOutput
}

type RegistryCredentialArgs struct {
	// A public key certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificateInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

// RegistryCredentialArrayInput is an input type that accepts RegistryCredentialArray and RegistryCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialArrayInput` via:
//
// 		 RegistryCredentialArray{ RegistryCredentialArgs{...} }
//
type RegistryCredentialArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput
	ToRegistryCredentialArrayOutputWithContext(context.Context) RegistryCredentialArrayOutput
}

type RegistryCredentialArray []RegistryCredentialInput

func (RegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return i.ToRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArrayOutput)
}

type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

// A public key certificate format and data.
func (o RegistryCredentialOutput) PublicKeyCertificate() RegistryCredentialPublicKeyCertificateOutput {
	return o.ApplyT(func(v RegistryCredential) RegistryCredentialPublicKeyCertificate { return v.PublicKeyCertificate }).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) Index(i pulumi.IntInput) RegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredential {
		return vs[0].([]RegistryCredential)[vs[1].(int)]
	}).(RegistryCredentialOutput)
}

type RegistryCredentialPublicKeyCertificate struct {
	// The certificate data.
	Certificate string `pulumi:"certificate"`
	// The field allows only `X509_CERTIFICATE_PEM`.
	Format string `pulumi:"format"`
}

// RegistryCredentialPublicKeyCertificateInput is an input type that accepts RegistryCredentialPublicKeyCertificateArgs and RegistryCredentialPublicKeyCertificateOutput values.
// You can construct a concrete instance of `RegistryCredentialPublicKeyCertificateInput` via:
//
// 		 RegistryCredentialPublicKeyCertificateArgs{...}
//
type RegistryCredentialPublicKeyCertificateInput interface {
	pulumi.Input

	ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput
	ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Context) RegistryCredentialPublicKeyCertificateOutput
}

type RegistryCredentialPublicKeyCertificateArgs struct {
	// The certificate data.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The field allows only `X509_CERTIFICATE_PEM`.
	Format pulumi.StringInput `pulumi:"format"`
}

func (RegistryCredentialPublicKeyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return i.ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Background())
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialPublicKeyCertificateOutput struct{ *pulumi.OutputState }

func (RegistryCredentialPublicKeyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return o
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return o
}

// The certificate data.
func (o RegistryCredentialPublicKeyCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Certificate }).(pulumi.StringOutput)
}

// The field allows only `X509_CERTIFICATE_PEM`.
func (o RegistryCredentialPublicKeyCertificateOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Format }).(pulumi.StringOutput)
}

type RegistryEventNotificationConfigItem struct {
	// PubSub topic name to publish device events.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last `eventNotificationConfigs`
	// item.
	SubfolderMatches *string `pulumi:"subfolderMatches"`
}

// RegistryEventNotificationConfigItemInput is an input type that accepts RegistryEventNotificationConfigItemArgs and RegistryEventNotificationConfigItemOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemInput` via:
//
// 		 RegistryEventNotificationConfigItemArgs{...}
//
type RegistryEventNotificationConfigItemInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput
	ToRegistryEventNotificationConfigItemOutputWithContext(context.Context) RegistryEventNotificationConfigItemOutput
}

type RegistryEventNotificationConfigItemArgs struct {
	// PubSub topic name to publish device events.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last `eventNotificationConfigs`
	// item.
	SubfolderMatches pulumi.StringPtrInput `pulumi:"subfolderMatches"`
}

func (RegistryEventNotificationConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return i.ToRegistryEventNotificationConfigItemOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemOutput)
}

// RegistryEventNotificationConfigItemArrayInput is an input type that accepts RegistryEventNotificationConfigItemArray and RegistryEventNotificationConfigItemArrayOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemArrayInput` via:
//
// 		 RegistryEventNotificationConfigItemArray{ RegistryEventNotificationConfigItemArgs{...} }
//
type RegistryEventNotificationConfigItemArrayInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput
	ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Context) RegistryEventNotificationConfigItemArrayOutput
}

type RegistryEventNotificationConfigItemArray []RegistryEventNotificationConfigItemInput

func (RegistryEventNotificationConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return i.ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemArrayOutput)
}

type RegistryEventNotificationConfigItemOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return o
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return o
}

// PubSub topic name to publish device events.
func (o RegistryEventNotificationConfigItemOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

// If the subfolder name matches this string exactly, this
// configuration will be used. The string must not include the
// leading '/' character. If empty, all strings are matched. Empty
// value can only be used for the last `eventNotificationConfigs`
// item.
func (o RegistryEventNotificationConfigItemOutput) SubfolderMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) *string { return v.SubfolderMatches }).(pulumi.StringPtrOutput)
}

type RegistryEventNotificationConfigItemArrayOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) Index(i pulumi.IntInput) RegistryEventNotificationConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryEventNotificationConfigItem {
		return vs[0].([]RegistryEventNotificationConfigItem)[vs[1].(int)]
	}).(RegistryEventNotificationConfigItemOutput)
}

type RegistryHttpConfig struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

// RegistryHttpConfigInput is an input type that accepts RegistryHttpConfigArgs and RegistryHttpConfigOutput values.
// You can construct a concrete instance of `RegistryHttpConfigInput` via:
//
// 		 RegistryHttpConfigArgs{...}
//
type RegistryHttpConfigInput interface {
	pulumi.Input

	ToRegistryHttpConfigOutput() RegistryHttpConfigOutput
	ToRegistryHttpConfigOutputWithContext(context.Context) RegistryHttpConfigOutput
}

type RegistryHttpConfigArgs struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState pulumi.StringInput `pulumi:"httpEnabledState"`
}

func (RegistryHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return i.ToRegistryHttpConfigOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput)
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput).ToRegistryHttpConfigPtrOutputWithContext(ctx)
}

// RegistryHttpConfigPtrInput is an input type that accepts RegistryHttpConfigArgs, RegistryHttpConfigPtr and RegistryHttpConfigPtrOutput values.
// You can construct a concrete instance of `RegistryHttpConfigPtrInput` via:
//
// 		 RegistryHttpConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryHttpConfigPtrInput interface {
	pulumi.Input

	ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput
	ToRegistryHttpConfigPtrOutputWithContext(context.Context) RegistryHttpConfigPtrOutput
}

type registryHttpConfigPtrType RegistryHttpConfigArgs

func RegistryHttpConfigPtr(v *RegistryHttpConfigArgs) RegistryHttpConfigPtrInput {
	return (*registryHttpConfigPtrType)(v)
}

func (*registryHttpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigPtrOutput)
}

type RegistryHttpConfigOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o.ApplyT(func(v RegistryHttpConfig) *RegistryHttpConfig {
		return &v
	}).(RegistryHttpConfigPtrOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfig) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) Elem() RegistryHttpConfigOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) RegistryHttpConfig { return *v }).(RegistryHttpConfigOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigPtrOutput) HttpEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HttpEnabledState
	}).(pulumi.StringPtrOutput)
}

type RegistryMqttConfig struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

// RegistryMqttConfigInput is an input type that accepts RegistryMqttConfigArgs and RegistryMqttConfigOutput values.
// You can construct a concrete instance of `RegistryMqttConfigInput` via:
//
// 		 RegistryMqttConfigArgs{...}
//
type RegistryMqttConfigInput interface {
	pulumi.Input

	ToRegistryMqttConfigOutput() RegistryMqttConfigOutput
	ToRegistryMqttConfigOutputWithContext(context.Context) RegistryMqttConfigOutput
}

type RegistryMqttConfigArgs struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState pulumi.StringInput `pulumi:"mqttEnabledState"`
}

func (RegistryMqttConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return i.ToRegistryMqttConfigOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput)
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput).ToRegistryMqttConfigPtrOutputWithContext(ctx)
}

// RegistryMqttConfigPtrInput is an input type that accepts RegistryMqttConfigArgs, RegistryMqttConfigPtr and RegistryMqttConfigPtrOutput values.
// You can construct a concrete instance of `RegistryMqttConfigPtrInput` via:
//
// 		 RegistryMqttConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryMqttConfigPtrInput interface {
	pulumi.Input

	ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput
	ToRegistryMqttConfigPtrOutputWithContext(context.Context) RegistryMqttConfigPtrOutput
}

type registryMqttConfigPtrType RegistryMqttConfigArgs

func RegistryMqttConfigPtr(v *RegistryMqttConfigArgs) RegistryMqttConfigPtrInput {
	return (*registryMqttConfigPtrType)(v)
}

func (*registryMqttConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigPtrOutput)
}

type RegistryMqttConfigOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o.ApplyT(func(v RegistryMqttConfig) *RegistryMqttConfig {
		return &v
	}).(RegistryMqttConfigPtrOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfig) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) Elem() RegistryMqttConfigOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) RegistryMqttConfig { return *v }).(RegistryMqttConfigOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigPtrOutput) MqttEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) *string {
		if v == nil {
			return nil
		}
		return &v.MqttEnabledState
	}).(pulumi.StringPtrOutput)
}

type RegistryStateNotificationConfig struct {
	// PubSub topic name to publish device events.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

// RegistryStateNotificationConfigInput is an input type that accepts RegistryStateNotificationConfigArgs and RegistryStateNotificationConfigOutput values.
// You can construct a concrete instance of `RegistryStateNotificationConfigInput` via:
//
// 		 RegistryStateNotificationConfigArgs{...}
//
type RegistryStateNotificationConfigInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput
	ToRegistryStateNotificationConfigOutputWithContext(context.Context) RegistryStateNotificationConfigOutput
}

type RegistryStateNotificationConfigArgs struct {
	// PubSub topic name to publish device events.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
}

func (RegistryStateNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return i.ToRegistryStateNotificationConfigOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput)
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput).ToRegistryStateNotificationConfigPtrOutputWithContext(ctx)
}

// RegistryStateNotificationConfigPtrInput is an input type that accepts RegistryStateNotificationConfigArgs, RegistryStateNotificationConfigPtr and RegistryStateNotificationConfigPtrOutput values.
// You can construct a concrete instance of `RegistryStateNotificationConfigPtrInput` via:
//
// 		 RegistryStateNotificationConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegistryStateNotificationConfigPtrInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput
	ToRegistryStateNotificationConfigPtrOutputWithContext(context.Context) RegistryStateNotificationConfigPtrOutput
}

type registryStateNotificationConfigPtrType RegistryStateNotificationConfigArgs

func RegistryStateNotificationConfigPtr(v *RegistryStateNotificationConfigArgs) RegistryStateNotificationConfigPtrInput {
	return (*registryStateNotificationConfigPtrType)(v)
}

func (*registryStateNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigPtrOutput)
}

type RegistryStateNotificationConfigOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) *RegistryStateNotificationConfig {
		return &v
	}).(RegistryStateNotificationConfigPtrOutput)
}

// PubSub topic name to publish device events.
func (o RegistryStateNotificationConfigOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) Elem() RegistryStateNotificationConfigOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) RegistryStateNotificationConfig { return *v }).(RegistryStateNotificationConfigOutput)
}

// PubSub topic name to publish device events.
func (o RegistryStateNotificationConfigPtrOutput) PubsubTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopicName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DeviceConfigOutput{})
	pulumi.RegisterOutputType(DeviceConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceCredentialOutput{})
	pulumi.RegisterOutputType(DeviceCredentialArrayOutput{})
	pulumi.RegisterOutputType(DeviceCredentialPublicKeyOutput{})
	pulumi.RegisterOutputType(DeviceGatewayConfigOutput{})
	pulumi.RegisterOutputType(DeviceGatewayConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceLastErrorStatusOutput{})
	pulumi.RegisterOutputType(DeviceLastErrorStatusPtrOutput{})
	pulumi.RegisterOutputType(DeviceStateTypeOutput{})
	pulumi.RegisterOutputType(DeviceStateTypePtrOutput{})
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialPublicKeyCertificateOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemArrayOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigPtrOutput{})
}
